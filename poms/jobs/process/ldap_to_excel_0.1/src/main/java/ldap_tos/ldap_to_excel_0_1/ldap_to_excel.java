// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ldap_tos.ldap_to_excel_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: ldap_to_excel Purpose: LDAP to Excel<br>
 * Description: Cargar usuarios ldap a una hoja excel <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class ldap_to_excel implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ldap_to_excel";
	private final String projectName = "LDAP_TOS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ldap_to_excel.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ldap_to_excel.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tLDAPInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLDAPInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLDAPInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLDAPInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLDAPInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LDAP_TOS_ldap_to_excel = new byte[0];
		static byte[] commonByteArray_LDAP_TOS_ldap_to_excel = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String whenCreated;

		public String getWhenCreated() {
			return this.whenCreated;
		}

		public String whenChanged;

		public String getWhenChanged() {
			return this.whenChanged;
		}

		public String userPrincipalName;

		public String getUserPrincipalName() {
			return this.userPrincipalName;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String mail;

		public String getMail() {
			return this.mail;
		}

		public String employeeID;

		public String getEmployeeID() {
			return this.employeeID;
		}

		public String displayName;

		public String getDisplayName() {
			return this.displayName;
		}

		public String sAMAccountName;

		public String getSAMAccountName() {
			return this.sAMAccountName;
		}

		public String distinguishedName;

		public String getDistinguishedName() {
			return this.distinguishedName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.employeeID == null) ? 0 : this.employeeID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.employeeID == null) {
				if (other.employeeID != null)
					return false;

			} else if (!this.employeeID.equals(other.employeeID))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.whenCreated = this.whenCreated;
			other.whenChanged = this.whenChanged;
			other.userPrincipalName = this.userPrincipalName;
			other.name = this.name;
			other.mail = this.mail;
			other.employeeID = this.employeeID;
			other.displayName = this.displayName;
			other.sAMAccountName = this.sAMAccountName;
			other.distinguishedName = this.distinguishedName;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.employeeID = this.employeeID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LDAP_TOS_ldap_to_excel.length) {
					if (length < 1024 && commonByteArray_LDAP_TOS_ldap_to_excel.length == 0) {
						commonByteArray_LDAP_TOS_ldap_to_excel = new byte[1024];
					} else {
						commonByteArray_LDAP_TOS_ldap_to_excel = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LDAP_TOS_ldap_to_excel, 0, length);
				strReturn = new String(commonByteArray_LDAP_TOS_ldap_to_excel, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LDAP_TOS_ldap_to_excel.length) {
					if (length < 1024 && commonByteArray_LDAP_TOS_ldap_to_excel.length == 0) {
						commonByteArray_LDAP_TOS_ldap_to_excel = new byte[1024];
					} else {
						commonByteArray_LDAP_TOS_ldap_to_excel = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_LDAP_TOS_ldap_to_excel, 0, length);
				strReturn = new String(commonByteArray_LDAP_TOS_ldap_to_excel, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LDAP_TOS_ldap_to_excel) {

				try {

					int length = 0;

					this.whenCreated = readString(dis);

					this.whenChanged = readString(dis);

					this.userPrincipalName = readString(dis);

					this.name = readString(dis);

					this.mail = readString(dis);

					this.employeeID = readString(dis);

					this.displayName = readString(dis);

					this.sAMAccountName = readString(dis);

					this.distinguishedName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_LDAP_TOS_ldap_to_excel) {

				try {

					int length = 0;

					this.whenCreated = readString(dis);

					this.whenChanged = readString(dis);

					this.userPrincipalName = readString(dis);

					this.name = readString(dis);

					this.mail = readString(dis);

					this.employeeID = readString(dis);

					this.displayName = readString(dis);

					this.sAMAccountName = readString(dis);

					this.distinguishedName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.whenCreated, dos);

				// String

				writeString(this.whenChanged, dos);

				// String

				writeString(this.userPrincipalName, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.mail, dos);

				// String

				writeString(this.employeeID, dos);

				// String

				writeString(this.displayName, dos);

				// String

				writeString(this.sAMAccountName, dos);

				// String

				writeString(this.distinguishedName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.whenCreated, dos);

				// String

				writeString(this.whenChanged, dos);

				// String

				writeString(this.userPrincipalName, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.mail, dos);

				// String

				writeString(this.employeeID, dos);

				// String

				writeString(this.displayName, dos);

				// String

				writeString(this.sAMAccountName, dos);

				// String

				writeString(this.distinguishedName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("whenCreated=" + whenCreated);
			sb.append(",whenChanged=" + whenChanged);
			sb.append(",userPrincipalName=" + userPrincipalName);
			sb.append(",name=" + name);
			sb.append(",mail=" + mail);
			sb.append(",employeeID=" + employeeID);
			sb.append(",displayName=" + displayName);
			sb.append(",sAMAccountName=" + sAMAccountName);
			sb.append(",distinguishedName=" + distinguishedName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.employeeID, other.employeeID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LDAP_TOS_ldap_to_excel = new byte[0];
		static byte[] commonByteArray_LDAP_TOS_ldap_to_excel = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String whenCreated;

		public String getWhenCreated() {
			return this.whenCreated;
		}

		public String whenChanged;

		public String getWhenChanged() {
			return this.whenChanged;
		}

		public String userPrincipalName;

		public String getUserPrincipalName() {
			return this.userPrincipalName;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String mail;

		public String getMail() {
			return this.mail;
		}

		public String employeeID;

		public String getEmployeeID() {
			return this.employeeID;
		}

		public String displayName;

		public String getDisplayName() {
			return this.displayName;
		}

		public String sAMAccountName;

		public String getSAMAccountName() {
			return this.sAMAccountName;
		}

		public String distinguishedName;

		public String getDistinguishedName() {
			return this.distinguishedName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.employeeID == null) ? 0 : this.employeeID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.employeeID == null) {
				if (other.employeeID != null)
					return false;

			} else if (!this.employeeID.equals(other.employeeID))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.whenCreated = this.whenCreated;
			other.whenChanged = this.whenChanged;
			other.userPrincipalName = this.userPrincipalName;
			other.name = this.name;
			other.mail = this.mail;
			other.employeeID = this.employeeID;
			other.displayName = this.displayName;
			other.sAMAccountName = this.sAMAccountName;
			other.distinguishedName = this.distinguishedName;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.employeeID = this.employeeID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LDAP_TOS_ldap_to_excel.length) {
					if (length < 1024 && commonByteArray_LDAP_TOS_ldap_to_excel.length == 0) {
						commonByteArray_LDAP_TOS_ldap_to_excel = new byte[1024];
					} else {
						commonByteArray_LDAP_TOS_ldap_to_excel = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LDAP_TOS_ldap_to_excel, 0, length);
				strReturn = new String(commonByteArray_LDAP_TOS_ldap_to_excel, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LDAP_TOS_ldap_to_excel.length) {
					if (length < 1024 && commonByteArray_LDAP_TOS_ldap_to_excel.length == 0) {
						commonByteArray_LDAP_TOS_ldap_to_excel = new byte[1024];
					} else {
						commonByteArray_LDAP_TOS_ldap_to_excel = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_LDAP_TOS_ldap_to_excel, 0, length);
				strReturn = new String(commonByteArray_LDAP_TOS_ldap_to_excel, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LDAP_TOS_ldap_to_excel) {

				try {

					int length = 0;

					this.whenCreated = readString(dis);

					this.whenChanged = readString(dis);

					this.userPrincipalName = readString(dis);

					this.name = readString(dis);

					this.mail = readString(dis);

					this.employeeID = readString(dis);

					this.displayName = readString(dis);

					this.sAMAccountName = readString(dis);

					this.distinguishedName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_LDAP_TOS_ldap_to_excel) {

				try {

					int length = 0;

					this.whenCreated = readString(dis);

					this.whenChanged = readString(dis);

					this.userPrincipalName = readString(dis);

					this.name = readString(dis);

					this.mail = readString(dis);

					this.employeeID = readString(dis);

					this.displayName = readString(dis);

					this.sAMAccountName = readString(dis);

					this.distinguishedName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.whenCreated, dos);

				// String

				writeString(this.whenChanged, dos);

				// String

				writeString(this.userPrincipalName, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.mail, dos);

				// String

				writeString(this.employeeID, dos);

				// String

				writeString(this.displayName, dos);

				// String

				writeString(this.sAMAccountName, dos);

				// String

				writeString(this.distinguishedName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.whenCreated, dos);

				// String

				writeString(this.whenChanged, dos);

				// String

				writeString(this.userPrincipalName, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.mail, dos);

				// String

				writeString(this.employeeID, dos);

				// String

				writeString(this.displayName, dos);

				// String

				writeString(this.sAMAccountName, dos);

				// String

				writeString(this.distinguishedName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("whenCreated=" + whenCreated);
			sb.append(",whenChanged=" + whenChanged);
			sb.append(",userPrincipalName=" + userPrincipalName);
			sb.append(",name=" + name);
			sb.append(",mail=" + mail);
			sb.append(",employeeID=" + employeeID);
			sb.append(",displayName=" + displayName);
			sb.append(",sAMAccountName=" + sAMAccountName);
			sb.append(",distinguishedName=" + distinguishedName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.employeeID, other.employeeID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLDAPInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tLDAPInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row1Struct row2 = row1;

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/LDAP_TOS/ldap.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				String[] headColutFileOutputDelimited_1 = new String[9];
				class CSVBasicSet_tFileOutputDelimited_1 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep) throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_1[] = null;

						// support passing value (property: Field Separator) by 'context.fs' or
						// 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_1 = fieldSep.toCharArray();
						} else {
							throw new IllegalArgumentException("Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_1[] = null;

						// support passing value (property: Row Separator) by 'context.rs' or
						// 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_1 = rowSep.toCharArray();
						} else {
							throw new IllegalArgumentException("Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_1[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException("Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_1[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_1 = strTextEnclosure.toCharArray();
						} else {
							throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
				csvSettings_tFileOutputDelimited_1.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure("\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15")));
				CsvWritertFileOutputDelimited_1.setSeparator(csvSettings_tFileOutputDelimited_1.getFieldDelim());
				if (!csvSettings_tFileOutputDelimited_1.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_1.setLineEnd("" + csvSettings_tFileOutputDelimited_1.getRowDelim());
				}
				if (filetFileOutputDelimited_1.length() == 0) {
					headColutFileOutputDelimited_1[0] = "whenCreated";
					headColutFileOutputDelimited_1[1] = "whenChanged";
					headColutFileOutputDelimited_1[2] = "userPrincipalName";
					headColutFileOutputDelimited_1[3] = "name";
					headColutFileOutputDelimited_1[4] = "mail";
					headColutFileOutputDelimited_1[5] = "employeeID";
					headColutFileOutputDelimited_1[6] = "displayName";
					headColutFileOutputDelimited_1[7] = "sAMAccountName";
					headColutFileOutputDelimited_1[8] = "distinguishedName";
					CsvWritertFileOutputDelimited_1.writeNext(headColutFileOutputDelimited_1);
					CsvWritertFileOutputDelimited_1.flush();
				}
				CsvWritertFileOutputDelimited_1.setEscapeChar(csvSettings_tFileOutputDelimited_1.getEscapeChar());
				CsvWritertFileOutputDelimited_1.setQuoteChar(csvSettings_tFileOutputDelimited_1.getTextEnclosure());
				CsvWritertFileOutputDelimited_1.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_1", CsvWritertFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[9];

					public void addRow(String[] row) {

						for (int i = 0; i < 9; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 8 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 8 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[8] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "whenCreated", "whenChanged", "userPrincipalName", "name", "mail",
						"employeeID", "displayName", "sAMAccountName", "distinguishedName", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tLDAPInput_1 begin ] start
				 */

				ok_Hash.put("tLDAPInput_1", false);
				start_Hash.put("tLDAPInput_1", System.currentTimeMillis());

				currentComponent = "tLDAPInput_1";

				int tos_count_tLDAPInput_1 = 0;

				String baseDN_tLDAPInput_1 = "";
				int tLDAPInput_1_NB_LINE = 0;
				java.util.Hashtable env_tLDAPInput_1 = new java.util.Hashtable();
				env_tLDAPInput_1.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
				env_tLDAPInput_1.put(javax.naming.Context.REFERRAL, "ignore");
				env_tLDAPInput_1.put("java.naming.ldap.derefAliases", "always");
				env_tLDAPInput_1.put(javax.naming.Context.PROVIDER_URL, "ldap://" + "fortel.local" + ":" + 389);

				javax.naming.ldap.InitialLdapContext ctx_tLDAPInput_1 = null;
				try {

					final String decryptedPassword_tLDAPInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
							"enc:routine.encryption.key.v1:ubbZ37ZWaGaSdNwe3q2li2EsE6T0NNXfRtRZcknG1JBcNRBSpwHVRfs=");

					env_tLDAPInput_1.put(javax.naming.Context.SECURITY_AUTHENTICATION, "simple");// "none","simple","strong"
					env_tLDAPInput_1.put(javax.naming.Context.SECURITY_PRINCIPAL, "alejandro.montalvan@fortel.local");
					env_tLDAPInput_1.put(javax.naming.Context.SECURITY_CREDENTIALS, decryptedPassword_tLDAPInput_1);
					ctx_tLDAPInput_1 = new javax.naming.ldap.InitialLdapContext(env_tLDAPInput_1, null);

					javax.naming.directory.SearchControls searchCtls_tLDAPInput_1 = new javax.naming.directory.SearchControls();
					searchCtls_tLDAPInput_1.setSearchScope(javax.naming.directory.SearchControls.SUBTREE_SCOPE);
					searchCtls_tLDAPInput_1.setReturningAttributes(
							new String[] { "whenCreated", "whenChanged", "userPrincipalName", "name", "mail",
									"employeeID", "displayName", "sAMAccountName", "distinguishedName", });
					searchCtls_tLDAPInput_1.setTimeLimit(10000 * 1000);
					searchCtls_tLDAPInput_1.setCountLimit(10000);
					baseDN_tLDAPInput_1 = "DC=FORTEL,DC=LOCAL";

					// Set the page size and initialize the cookie that we pass back in subsequent
					// pages
					int pageSize_tLDAPInput_1 = 1000;
					byte[] cookie_tLDAPInput_1 = null;
					// Request the paged results control
					javax.naming.ldap.Control[] ctls_tLDAPInput_1 = new javax.naming.ldap.Control[] {
							new javax.naming.ldap.PagedResultsControl(pageSize_tLDAPInput_1, true) };
					ctx_tLDAPInput_1.setRequestControls(ctls_tLDAPInput_1);

					do {

						javax.naming.NamingEnumeration answer_tLDAPInput_1 = ctx_tLDAPInput_1.search(
								baseDN_tLDAPInput_1, "(&(objectClass=*)(employeeId=*))", searchCtls_tLDAPInput_1);

						while (answer_tLDAPInput_1.hasMoreElements()) {// a
							row1 = null;
							tLDAPInput_1_NB_LINE++;
							javax.naming.directory.Attributes attrs_tLDAPInput_1 = null;
							row1 = new row1Struct();
							try {

								javax.naming.directory.SearchResult sr_tLDAPInput_1 = (javax.naming.directory.SearchResult) answer_tLDAPInput_1
										.next();
								globalMap.put("tLDAPInput_1_RESULT_NAME", sr_tLDAPInput_1.getName());
								attrs_tLDAPInput_1 = sr_tLDAPInput_1.getAttributes();
								// for output
								if (attrs_tLDAPInput_1 != null) {// b
									javax.naming.directory.Attribute attr_whenCreated_tLDAPInput_1 = attrs_tLDAPInput_1
											.get("whenCreated");
									if (attr_whenCreated_tLDAPInput_1 != null) {
										StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
										for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_whenCreated_tLDAPInput_1
												.getAll(); e_tLDAPInput_1.hasMore();) {
											if (attrStr_tLDAPInput_1.length() > 0) {
												attrStr_tLDAPInput_1.append(";");
											}
											attrStr_tLDAPInput_1.append(e_tLDAPInput_1.next().toString());
										}
										row1.whenCreated = attrStr_tLDAPInput_1.toString();
									} else {
										row1.whenCreated = null;
									}
									javax.naming.directory.Attribute attr_whenChanged_tLDAPInput_1 = attrs_tLDAPInput_1
											.get("whenChanged");
									if (attr_whenChanged_tLDAPInput_1 != null) {
										StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
										for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_whenChanged_tLDAPInput_1
												.getAll(); e_tLDAPInput_1.hasMore();) {
											if (attrStr_tLDAPInput_1.length() > 0) {
												attrStr_tLDAPInput_1.append(";");
											}
											attrStr_tLDAPInput_1.append(e_tLDAPInput_1.next().toString());
										}
										row1.whenChanged = attrStr_tLDAPInput_1.toString();
									} else {
										row1.whenChanged = null;
									}
									javax.naming.directory.Attribute attr_userPrincipalName_tLDAPInput_1 = attrs_tLDAPInput_1
											.get("userPrincipalName");
									if (attr_userPrincipalName_tLDAPInput_1 != null) {
										StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
										for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_userPrincipalName_tLDAPInput_1
												.getAll(); e_tLDAPInput_1.hasMore();) {
											if (attrStr_tLDAPInput_1.length() > 0) {
												attrStr_tLDAPInput_1.append(";");
											}
											attrStr_tLDAPInput_1.append(e_tLDAPInput_1.next().toString());
										}
										row1.userPrincipalName = attrStr_tLDAPInput_1.toString();
									} else {
										row1.userPrincipalName = null;
									}
									javax.naming.directory.Attribute attr_name_tLDAPInput_1 = attrs_tLDAPInput_1
											.get("name");
									if (attr_name_tLDAPInput_1 != null) {
										StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
										for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_name_tLDAPInput_1
												.getAll(); e_tLDAPInput_1.hasMore();) {
											if (attrStr_tLDAPInput_1.length() > 0) {
												attrStr_tLDAPInput_1.append(";");
											}
											attrStr_tLDAPInput_1.append(e_tLDAPInput_1.next().toString());
										}
										row1.name = attrStr_tLDAPInput_1.toString();
									} else {
										row1.name = null;
									}
									javax.naming.directory.Attribute attr_mail_tLDAPInput_1 = attrs_tLDAPInput_1
											.get("mail");
									if (attr_mail_tLDAPInput_1 != null) {
										StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
										for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_mail_tLDAPInput_1
												.getAll(); e_tLDAPInput_1.hasMore();) {
											if (attrStr_tLDAPInput_1.length() > 0) {
												attrStr_tLDAPInput_1.append(";");
											}
											attrStr_tLDAPInput_1.append(e_tLDAPInput_1.next().toString());
										}
										row1.mail = attrStr_tLDAPInput_1.toString();
									} else {
										row1.mail = null;
									}
									javax.naming.directory.Attribute attr_employeeID_tLDAPInput_1 = attrs_tLDAPInput_1
											.get("employeeID");
									if (attr_employeeID_tLDAPInput_1 != null) {
										StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
										for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_employeeID_tLDAPInput_1
												.getAll(); e_tLDAPInput_1.hasMore();) {
											if (attrStr_tLDAPInput_1.length() > 0) {
												attrStr_tLDAPInput_1.append(";");
											}
											attrStr_tLDAPInput_1.append(e_tLDAPInput_1.next().toString());
										}
										row1.employeeID = attrStr_tLDAPInput_1.toString();
									} else {
										row1.employeeID = null;
									}
									javax.naming.directory.Attribute attr_displayName_tLDAPInput_1 = attrs_tLDAPInput_1
											.get("displayName");
									if (attr_displayName_tLDAPInput_1 != null) {
										StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
										for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_displayName_tLDAPInput_1
												.getAll(); e_tLDAPInput_1.hasMore();) {
											if (attrStr_tLDAPInput_1.length() > 0) {
												attrStr_tLDAPInput_1.append(";");
											}
											attrStr_tLDAPInput_1.append(e_tLDAPInput_1.next().toString());
										}
										row1.displayName = attrStr_tLDAPInput_1.toString();
									} else {
										row1.displayName = null;
									}
									javax.naming.directory.Attribute attr_sAMAccountName_tLDAPInput_1 = attrs_tLDAPInput_1
											.get("sAMAccountName");
									if (attr_sAMAccountName_tLDAPInput_1 != null) {
										StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
										for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_sAMAccountName_tLDAPInput_1
												.getAll(); e_tLDAPInput_1.hasMore();) {
											if (attrStr_tLDAPInput_1.length() > 0) {
												attrStr_tLDAPInput_1.append(";");
											}
											attrStr_tLDAPInput_1.append(e_tLDAPInput_1.next().toString());
										}
										row1.sAMAccountName = attrStr_tLDAPInput_1.toString();
									} else {
										row1.sAMAccountName = null;
									}
									javax.naming.directory.Attribute attr_distinguishedName_tLDAPInput_1 = attrs_tLDAPInput_1
											.get("distinguishedName");
									if (attr_distinguishedName_tLDAPInput_1 != null) {
										StringBuilder attrStr_tLDAPInput_1 = new StringBuilder();
										for (javax.naming.NamingEnumeration e_tLDAPInput_1 = attr_distinguishedName_tLDAPInput_1
												.getAll(); e_tLDAPInput_1.hasMore();) {
											if (attrStr_tLDAPInput_1.length() > 0) {
												attrStr_tLDAPInput_1.append(";");
											}
											attrStr_tLDAPInput_1.append(e_tLDAPInput_1.next().toString());
										}
										row1.distinguishedName = attrStr_tLDAPInput_1.toString();
									} else {
										row1.distinguishedName = null;
									}
								} // b
							} catch (java.lang.Exception e) {
								globalMap.put("tLDAPInput_1_ERROR_MESSAGE", e.getMessage());

								throw (e);
							}
///////////////////////////////////        

							/**
							 * [tLDAPInput_1 begin ] stop
							 */

							/**
							 * [tLDAPInput_1 main ] start
							 */

							currentComponent = "tLDAPInput_1";

							tos_count_tLDAPInput_1++;

							/**
							 * [tLDAPInput_1 main ] stop
							 */

							/**
							 * [tLDAPInput_1 process_data_begin ] start
							 */

							currentComponent = "tLDAPInput_1";

							/**
							 * [tLDAPInput_1 process_data_begin ] stop
							 */
// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row1"

									);
								}

///////////////////////		

								String[] row_tLogRow_1 = new String[9];

								if (row1.whenCreated != null) { //
									row_tLogRow_1[0] = String.valueOf(row1.whenCreated);

								} //

								if (row1.whenChanged != null) { //
									row_tLogRow_1[1] = String.valueOf(row1.whenChanged);

								} //

								if (row1.userPrincipalName != null) { //
									row_tLogRow_1[2] = String.valueOf(row1.userPrincipalName);

								} //

								if (row1.name != null) { //
									row_tLogRow_1[3] = String.valueOf(row1.name);

								} //

								if (row1.mail != null) { //
									row_tLogRow_1[4] = String.valueOf(row1.mail);

								} //

								if (row1.employeeID != null) { //
									row_tLogRow_1[5] = String.valueOf(row1.employeeID);

								} //

								if (row1.displayName != null) { //
									row_tLogRow_1[6] = String.valueOf(row1.displayName);

								} //

								if (row1.sAMAccountName != null) { //
									row_tLogRow_1[7] = String.valueOf(row1.sAMAccountName);

								} //

								if (row1.distinguishedName != null) { //
									row_tLogRow_1[8] = String.valueOf(row1.distinguishedName);

								} //

								util_tLogRow_1.addRow(row_tLogRow_1);
								nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

								row2 = row1;

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tLogRow_1 process_data_begin ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 main ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row2"

									);
								}

								String[] rowtFileOutputDelimited_1 = new String[9];
								rowtFileOutputDelimited_1[0] = row2.whenCreated == null ? null : row2.whenCreated;
								rowtFileOutputDelimited_1[1] = row2.whenChanged == null ? null : row2.whenChanged;
								rowtFileOutputDelimited_1[2] = row2.userPrincipalName == null ? null
										: row2.userPrincipalName;
								rowtFileOutputDelimited_1[3] = row2.name == null ? null : row2.name;
								rowtFileOutputDelimited_1[4] = row2.mail == null ? null : row2.mail;
								rowtFileOutputDelimited_1[5] = row2.employeeID == null ? null : row2.employeeID;
								rowtFileOutputDelimited_1[6] = row2.displayName == null ? null : row2.displayName;
								rowtFileOutputDelimited_1[7] = row2.sAMAccountName == null ? null : row2.sAMAccountName;
								rowtFileOutputDelimited_1[8] = row2.distinguishedName == null ? null
										: row2.distinguishedName;
								nb_line_tFileOutputDelimited_1++;
								resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
								CsvWritertFileOutputDelimited_1.writeNext(rowtFileOutputDelimited_1);

								tos_count_tFileOutputDelimited_1++;

								/**
								 * [tFileOutputDelimited_1 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								/**
								 * [tFileOutputDelimited_1 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								/**
								 * [tFileOutputDelimited_1 process_data_end ] stop
								 */

								/**
								 * [tLogRow_1 process_data_end ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_end ] stop
								 */

							} // End of branch "row1"

							/**
							 * [tLDAPInput_1 process_data_end ] start
							 */

							currentComponent = "tLDAPInput_1";

							/**
							 * [tLDAPInput_1 process_data_end ] stop
							 */

							/**
							 * [tLDAPInput_1 end ] start
							 */

							currentComponent = "tLDAPInput_1";

						} // a

						// examine the response controls
						javax.naming.ldap.Control[] responseControls_tLDAPInput_1 = ctx_tLDAPInput_1
								.getResponseControls();
						if (responseControls_tLDAPInput_1 != null) {
							for (int i_tLDAPInput_1 = 0; i_tLDAPInput_1 < responseControls_tLDAPInput_1.length; i_tLDAPInput_1++) {
								if (responseControls_tLDAPInput_1[i_tLDAPInput_1] instanceof javax.naming.ldap.PagedResultsResponseControl) {
									javax.naming.ldap.PagedResultsResponseControl prrc_tLDAPInput_1 = (javax.naming.ldap.PagedResultsResponseControl) responseControls_tLDAPInput_1[i_tLDAPInput_1];
									cookie_tLDAPInput_1 = prrc_tLDAPInput_1.getCookie();
								}
							}
						}
						// pass the cookie back to the server for the next page
						ctx_tLDAPInput_1.setRequestControls(new javax.naming.ldap.Control[] {
								new javax.naming.ldap.PagedResultsControl(pageSize_tLDAPInput_1, cookie_tLDAPInput_1,
										javax.naming.ldap.Control.CRITICAL) });

					} while ((cookie_tLDAPInput_1 != null) && (cookie_tLDAPInput_1.length != 0));
				} catch (java.lang.Exception e) {
					globalMap.put("tLDAPInput_1_ERROR_MESSAGE", e.getMessage());
					throw new java.lang.Exception(e);
				} finally {
					if (ctx_tLDAPInput_1 != null) {

						ctx_tLDAPInput_1.close();

					}
				}
				globalMap.put("tLDAPInput_1_NB_LINE", tLDAPInput_1_NB_LINE);

				ok_Hash.put("tLDAPInput_1", true);
				end_Hash.put("tLDAPInput_1", System.currentTimeMillis());

				/**
				 * [tLDAPInput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (CsvWritertFileOutputDelimited_1 != null) {
					CsvWritertFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLDAPInput_1 finally ] start
				 */

				currentComponent = "tLDAPInput_1";

				/**
				 * [tLDAPInput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_1");

					if (CsvWritertFileOutputDelimited_1 != null) {
						CsvWritertFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLDAPInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ldap_to_excel ldap_to_excelClass = new ldap_to_excel();

		int exitCode = ldap_to_excelClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = ldap_to_excel.class.getClassLoader()
					.getResourceAsStream("ldap_tos/ldap_to_excel_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = ldap_to_excel.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tLDAPInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tLDAPInput_1) {
			globalMap.put("tLDAPInput_1_SUBPROCESS_STATE", -1);

			e_tLDAPInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ldap_to_excel");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 83060 characters generated by Talend Open Studio for Data Integration on the
 * 13 de mayo de 2025, 12:07:05 COT
 ************************************************************************************************/